			REACT JS:
Framework: exiting tech

frontend :react js, angular,jquery...
backend  :nodejs,spring,django-fastapi,

MERN:   m mongo d
	e express
        r react
        n nodejs

framework , library

react js --> lib:-- facebook : opensource

cra:

react js :: project : vite fm

arch:
MVC : model view controller : jsp servlet, .net core :
facebook : php : 

n tire arch :
frontend : tech : diff
backend : tech  : diff

react js , node js , mongodb
react js . node js ,java  , monfdb

js: client browser
server side : nodejs

nodejs : install : node_module --> foders -->.js ->function...


npm : node package manager:
node_modules:


SINGLE PAGE APPLICATION:



c|D:
  projects
    2025-mern
        cmd
	 npm create vite
	  projectname 
	  react
	  js
	  
   
after projection.....
cd learning25
npm install : if you miss this it will throw vite not recgonized error
code . |[vs code..]

	cleanup app.jsx -->src
	open terminal
	 change profile to cmd
	  start server : npm run dev
		


error: npm is not recgonized as internal or external command

open cmd: npm install npm -g

vite is not recgonized:


netflix:


custom component:

function component: 16.x -->
class component:

function keyword
arrow function : =>

forEach -->void
map -->new re


task:

styling: header and footer .css

map task 1)
students id name age marks, gender city courses,

1)25>= color red --> start job
2)marks <=55 , highlit red --> quit
3)courses ---> java,python,css 3 eg java 1

2)
news table
id title category date
crime --> row yellow
sports news ---> blue..

3rd ay your own...



communication between components:
props:
	parent compint child comp data...
	immutable:
conext api
redux


ml : app --> Employee --> employeeList

hooks:
state hook

all hook name start use
useState:
DOM:
React js : Virtual dom:

DOM :copy vdom

HTML --> using js --> DOM object update:

Change --> VDOM : -- compare -- >og dom  --> reflect

stateHook

VDOM : documenation


1st  session : single page APPLICATION follow

npm install react-router-dom
react-router-dom v.7
<BrowserRouter>
    <Routes>
        <Route>


navbar : --> menu --> click --> components
IPL folder -->
Teams.jsx --> url teams 

navabar --> remove <a href> page refresh ---> avoid <Link> href ==to

plasyers -->

default localhost:5173 --> URL load "/" 

"/" -- >IPL component

wrong url --> error ---> end user --> error page ---> Error404.jsx --> 
url "/*"

url data pass --> nested routing.,

TEAMS -> 2 team cretae -> click --> teamDetail --> load --> id 

teamdetail/:id --> wildcard char

http://localhost:5173/teamdetail/102 --> teamdetail

101 -->get --> useParams ().id

useMemo : deep copy:


memo --> bomb
useSate -> seleectdGrids
click --> handlerfunction --> index -->
match -->random --> index --> match --> bopmb



form :

handleSubmit ---> react hook form

handleSubmit(cb)=>{

	//register ---> object
	var data = {
		name:"...",
		".....
	}
	cb(data)


}

{
	required:{
		value:true,message:"age is required *"
		}
}
{
            required:{
                value:true,
                message:"age is required.."
            }
}

components: life cycle:
creation [change] destory

useEffect : to hanlde side effect in react js we can use useEffect hook:
chat applicatation:

message :


chat array [{message:"hi",sen:"amit":rec:"parth"}] 

chat push[...push]

{

	chat map
		chat.map((item,index)=>{
			return(
				<div key={index}>
					{item.message}
				</div>
			)
		})
	}

}


loader state...
loading.....
5 second loader stop...


usestate : messages:
stories  : 

x -->change
y -->change


API : application programming interface:
java -->react

	unfrom : URL:

URL --> webpage --> API --->data

e comm: REACT --> NODE | java | python

backend --> api --> react --> integrate...
poducts --> react page -->



google form:

androif phone : google form :- backend:
andorind  --> java | [ython ] || database responsible...

form fill : submit ---> console.log --> [API] [backend tech] database

API request methods:


fetch ---> 
axios


custom hooks:
reusablity code...


create custom hook for post API

update: --> new componet -->form display [old data] -->edit -->update 


1 comp ->2
props: a --> b ---> c-->....z
	 : props drillling:
context:
	    globle store --->data put -->data access

        x -->water --> --> ---> z

redux



theme : ---> ThemeCOntext --> object -->app.js -->

themeContect ---->
App.js
var theme,setTheme  ="dark

	<ThemeContext.Provider value={theme,setThem}>
		
	</ThemeContext.Provider>


REDUX:
props : parent child -->a --> b ---> c --->d
context :  x --> y --> z --->p

statement
redux: redux toolkit



factory  ----> wh[] goods  --->market
store: 


bank balance: 1000 prv state  - 100 --> 900 next state

reducer : reducer is an pure function that takes the previous state and an 
		  action, and returns the next state.


action :  action in redux is a plain object that describes a change in the state of the application.
		  action is an object with a type property and an optional payload property.
		  type,action


2 comp relatonship:

app.js
	navabar  : store --> comp
	products : action --> store --->
	store.js : -->
			-->reducers
	redux -->reducers [slice [reducers,action]]		



